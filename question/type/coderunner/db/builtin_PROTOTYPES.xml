<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
        <text>$system$/CR_PROTOTYPES</text>

    </category>
  </question>

<!-- question: 5736  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_c_function</text>
    </name>
    <questiontext format="html">
      <text>Used for C write-a-function questions. The student answer is expected
      to be a complete C function, but it can optionally be preceded by other self-contained
      C code such as preprocessor directives and support functions.
      The test code is usually just single line of code that calls the primary student
      function and prints the result, but multiple line test code is
      possible, too, provided the code is suitable for wrapping inside
      the automatically-generated main function.
          
      The following standard header files are included: stdlib.h, ctype.h,
          string.h, stdbool.h, math.h.
          
      See the template for details.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>c_function</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#define SEPARATOR "#<ab@17943918#@>#"

{{ STUDENT_ANSWER }}

int main() {
{% for TEST in TESTCASES %}
   {
    {{ TEST.testcode }};
   }
    {% if not loop.last %}printf("%s\n", SEPARATOR);{% endif %}
{% endfor %}
    return 0;
}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>C</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5737  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_c_program</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for C write-a-program questions, where there is no
          per-test-case code, and the different tests just use different
          stdin data. The student answer is expected to be a complete
          runnable program, which is run as-is, without modification
          by CodeRunner.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>c_program</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>{{ STUDENT_ANSWER }}</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre></testsplitterre>
    <language>C</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5738  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_cpp_function</text>
    </name>
    <questiontext format="html">
      <text>Used for C++ write-a-function questions. The student answer is expected
      to be a complete C++ function, but it can optionally be preceded by other self-contained
      C code such as preprocessor directives and support functions.
      The test code is usually just single line of code that calls the primary student
      function and prints the result, but multiple line test code is
      possible, too, provided the code is suitable for wrapping inside
      the automatically-generated main function. When the combinator template
      is used to wrap all the testcases into a single program, each
      test case is isolated from the others by being placed in its own block.
          
      The following include files
      are included in the program: iostream, fstream, string, math, vector and
      algorithm. The user answer can include others if required.  
          
      See the template for details.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>cpp_function</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
        
using namespace std;
#define SEPARATOR "#<ab@17943918#@>#"

{{ STUDENT_ANSWER }}

int main() {
{% for TEST in TESTCASES %}
   {
    {{ TEST.extra }};
    {{ TEST.testcode }};
   }
    {% if not loop.last %}cout << SEPARATOR << endl;{% endif %}
{% endfor %}
    return 0;
}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>cpp</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5739  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_cpp_program</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for C++ write-a-program questions, where there is no
          per-test-case code, and the different tests just use different
          stdin data. The student answer is expected to be a complete
          runnable program, which is run as-is, without modification
          by CodeRunner.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>cpp_program</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>{{ STUDENT_ANSWER }}</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre></testsplitterre>
    <language>cpp</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5740  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_java_class</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for Java write-a-class questions where the student submits a
          complete class as their answer. Since the test cases for such questions
          will typically instantiate an object of the class and perform
          some tests on it, no attempt is made to combine the different test
          cases into a single executable. Each test case code is assumed to be
          a set of statements to be wrapped into the static void main 
          method of a separate Main class.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>java_class</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>{{ STUDENT_ANSWER | replace({'public class ': 'class '}) }}

public class __Tester__ {

    public static void main(String[] args) {
        __Tester__ main = new __Tester__();
        main.runTests();
    }

    public void runTests() {
        {{ TEST.testcode }};
    }
}
</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre></testsplitterre>
    <language>Java</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5741  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_java_method</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for Java write-a-method questions where the student is asked
      to write a method that is essentially a standalone function. The author-supplied
      test is typically just one or two lines of code that (apparently) just call
      the student supplied method. Under the hood, the template constructs a 
      Main class containing the student-supplied method (and any other support
      methods, if they choose to write them) plus a 'runTests' method that
      wraps the testcase(s). The main function for the class constructs an
      instance of Main and calls its runTests method.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>java_method</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[public class Main {
    static String SEPARATOR = "#<ab@17943918#@>#";
    {{ STUDENT_ANSWER }}

    public static void main(String[] args) {
        Main main = new Main();
        main.runTests();
    }

    public void runTests() {
{% for testCase in TESTCASES %}
    {
    {{ testCase.testcode }};
    {% if not loop.last %}
    System.out.println(SEPARATOR);
    {% endif %}
    }
{% endfor %}
    }
}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#
|ms]]></testsplitterre>
    <language>Java</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5742  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_java_program</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for Java write-a-program questions where the student submits
          a complete program as their answer. The program is executed for each
          test case. There is no test code, just stdin test data
          (though this isn't actually checked: caveat emptor).</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>java_program</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>{{ STUDENT_ANSWER }}</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre></testsplitterre>
    <language>Java</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5743  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_octave_function</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for Octave function questions. Student code must be a function
          declaration, which is tested with each testcase.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>octave_function</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{{ STUDENT_ANSWER }}

format free
        
{% for TEST in TESTCASES %}
{{ TEST.testcode }};
{% if not loop.last %}
disp('#<ab@17943918#@>#');
{% endif %}
{% endfor %}
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#
|ms]]></testsplitterre>
    <language>octave</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs>3</cputimelimitsecs>
    <memlimitmb>1000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5749  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_pascal_function</text>
    </name>
    <questiontext format="html">
      <text>A Pascal question type where the student is asked to write
      a procedure or function, which is then tested with a main program
      consisting of the CodeRunner 'testcode' wrapped in begin end.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>pascal_function</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>

{{ STUDENT_ANSWER }}

begin
    {{ TEST.testcode }};
end.
</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>pascal</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5750  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_pascal_program</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for Pascal write-a-program questions, where there is no
          per-test-case code, and the different tests just use different
          stdin data.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>pascal_program</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template>{{ STUDENT_ANSWER }}</template>
    <iscombinatortemplate>0</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre></testsplitterre>
    <language>pascal</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5744  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_php</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>A php question in which the student submission is a
normal php file, with PHP code enclosed in &lt;?php ... ?&gt; tags and
the output is the usual PHP output including all HTML content outside
the php tags.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>php</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{{ STUDENT_ANSWER }}

define('SEPARATOR', '#<ab@17943918#@>#');

{% for TEST in TESTCASES %}
{{ TEST.testcode }};
{% if not loop.last %}
echo SEPARATOR;
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>php</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>500000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5745  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_python2</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>A generic Python2 question. For each test case, the
          student code runs first, followed by the test code.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>python2</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#
|ms]]></testsplitterre>
    <language>python2</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5746  -->
  <question type="coderunner">
    <name>
      <text>BUILT_IN_PROTOTYPE_python3</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>A generic Python3 question. For each test case, the
          student code runs first, followed by the test code.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>1</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#
|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5747  -->
  <question type="coderunner">
    <name>
      <text>BUILTIN_PROTOTYPE_nodejs</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>A generic nodejs question in which the student answer precedes the tests.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>nodejs-2</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[{{ STUDENT_ANSWER }}

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>nodejs</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>1000</memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

<!-- question: 5748  -->
  <question type="coderunner">
    <name>
      <text>BUILTIN_PROTOTYPE_Python3_w_input</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>A variant of the normal Python3 question in which the
usual Python3 input() function is replaced with a version that echoes the data
it reads from standard input to standard output. This results in the program
output looking the same to the student as when the run it interactively,
with keyboard characters being echoed to the screen.</p>
<p>A slight disadvantage is that the line numbers in any error messages are
displaced by the length of inserted function, so don't correspond to those
displayed in the ACE edit window.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3_w_input</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime></penaltyregime>
    <precheck>0</precheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[__saved_input__ = input
def input(prompt=''):
    s = __saved_input__(prompt)
    print(s)
    return s

{{ STUDENT_ANSWER }}
SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <answer></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <testcases>
    </testcases>
  </question>

</quiz>